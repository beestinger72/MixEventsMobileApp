// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}
// Sidemenu with avatar
#menu-avatar {
  .icon-badge {
    top: 0px;
    right: 0px;
    background: #FF5D5D;
    color: white;
    font-size: 12px;
    position: absolute;
    padding: 5px 8px;
    border-radius: 15px;
  }
  
  .user-avatar {
    padding: .5em;
  }
  h3,
  .label {
    color: white;
    font-weight: bold;
  }
  .item {
    background: transparent;
  }
  ion-content {
    background: linear-gradient(48deg, rgba(157, 72, 173, 0.8) 0%, rgba(157, 72, 173, 0.86) 28%, rgba(0, 168, 168, 0.98) 93%, rgba(0, 168, 168, 1) 100%);
  }
  .menu-inner {
    background: rgba(255, 255, 255, .3);
  }
}

// Material Design Sidemenu
#menu-material {
  .menu-header {
    padding: 5px 15px;
    background-image: url('../assets/img/misc/material-design-background.jpg');
    background-size: cover;
    color: white;
    .name {
      font-weight: 500;
      margin-bottom: 3px;
    }
    .e-mail {
      margin-top: 0;
      margin-bottom: 5px;
    }
  }
  .user-avatar {
    padding: .5em;
    height: 12vh;
  }
  h3,
  .label,
  {
    color: #999;
    font-weight: 400;
  }
  ion-icon {
    color: #777;
  }
}

.hide-card {
  -webkit-box-shadow: none!important;
}

.custom-avatar {
  height: 10vw; 
  width: 10vw; 
  border: 1px solid #fff;
  display: inline-block;
  margin-left: auto;
  margin-right: auto;
  border-radius: 50% !important;
overflow: hidden;
}
.popover-wrapper .popover-content {
  box-shadow: 0px 3px 15px 0px rgba(0,0,0,0.25);
}

// style for auth pages
.auth-page {
  background-color: #fff;
  &::after {
    content: "";
    background: url("../assets/img/bg.jpg") no-repeat;
    background-size: cover;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    position: absolute;
    z-index: 0;
  }

  .scroll-content {
    display: flex;
    align-items: center;
    justify-content: center;
    //background: rgba(50, 10, 92, .4);

    .login-content {
      width: 86%;

      .logo {
        width: 200px;
        height: 200px;
        margin: 0px auto 0;
        border-radius: 10%;
        background: url("../assets/img/logo.png") no-repeat;
        background-size: 100%;
      }

      .list-form {
        padding: 0;
        margin-bottom: 0;

        ion-item {
          background: none;
          padding: 0;

          &:first-child {
            border-top: none;
          }

          &:after {
            display: none;
          }

          ion-label {
            font-size: 1em;
            color: color($colors, primary);
          }

          input {
            color: color($colors, primary);
          }
        }
      }
    }
  }
}
.user-profile{
padding:20px;

}
// Menu user profile
.user-profile {
  .user-avatar {
    width: 68px;
    height: 68px;
    display: inline-block;
    border-radius: 50%;
    box-shadow: inset 0 0 10rem rgba(0,0,0,.25), 0 0 4rem rgba(255,255,255,.45);
    img {
      border-radius: 50%;
    }
  }
  .toolbar-background {
    //background-image: linear-gradient(135deg, color($colors, dark), color($colors, primary));
    background-image: linear-gradient(135deg, #33adad, #488aff);
  }

  .other-data {
    .column {
      &:first-child {
        border-right: 1px solid rgba(36, 50, 157, .25);
      }
    }
  }
}
